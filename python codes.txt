


#3x=[3,5,6,1,2,3,4,5,5,10]  output= A,6,A,2,A

#using lamda write squer numbr input =5  op= 25

#comprensivelist print even number

#write dictionary print all element in the given dictionary, add key value

#s= "this is my line" output = line my is this

#dict  and string methods

#diffrence bw list and tuple

#how to valieate the ip address using python #regular expresion

#what is genarator

#what is interpreter= line by line execution.

#decorators = without affecting on existing fun

ctionality and adding new functionality

# what is call by reference and call by value in function.

#define inheritance and polymerphism

#what is scope of variable (local- within in function,global- within function,instance -current value)
#what is difference between Pass and break and continue,


#what is  difference between .py and.pyc

#define overloading and over riding


#s="abcdhsa"   string reverse
#remove the duplicates in given list
#add new elemnetns in list



'''python:-is programming  language it is having both procedure and OOPs oriented, high level,plotform indipendent programing laungage  
data types:

sequentila= list-add key delete key declare with suare bracket tuple set
map-dict
none=

h=1,23,4,6.7,8.8

rll78=Internal rom /512 kb 64kb rom
rx63n= memory high rom



1)numaric:
int
float
boolean
String


Dictionary it is pair of elements
1st elements:value
2nd elements:data
it repersenting in {}
ex:

dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}
print(dict['Age'])

set:-

set is a immutable (unchangeable)


repersent {}
can't find index value
ex:
x={1,2,3,4,5}
x[0]=6000 # error (unchangeable)
print(x[0])#con't find index value

tuple: 	
set is a immutable (unchangeable)
repersent ()
you can find index value but cant modified
x=(1,2,3,4,5) 
x[0]=6000 #(unchangeable)
print(x[0]) #you can find index value


List:
set is a mutable (changeable)
repersent []
you can find index value
x=[1,2,3,4,5]
x[0]=6000
print(x)
'''
example:  x=(1,2,3,4,5)
          #x[0]=6000 
          print(x[0])



import os
os.system('Desert.jpg')




f=open("C:/Users/6thenergy/Desktop/New folder/king.txt","w")
f.write("the whole world is just shadow of reality")
f.close()



f=open("C:/Users/6thenergy/Desktop/New folder/king.txt","r")
print(f.read())
f.close()

	


#multiplication n division#


x=int(input("enter the value of x: "))
y=int(input("enter the value of y: "))
class cal:
    def add():
        print(x+y)
    def sub():
        print(x-y)
    def mul():
        print(x*y)
    def div():
        print(x/y)
z=cal
z.add()
z.sub()
z.mul()
z.div()
      



#python dictionary#

tinydict = {'name': 'john','code':6734, 'dept': 'sales'}
print(tinydict['name'],tinydict['code'],tinydict['dept'])
z=cal
z.mul()
z.div()



#paratameter less concept#

class cal:
    def mul():
        print("mul ",x*y)
    def div():
        print("div is ",x/y)

         
x= int (input("enter the value of x:   "))
y= int  (input("enter the value of y:   "))
z=cal
z.mul()
z.div()


# loop concept#

for i in range(1000,1,-10):
    print('   ',i)





#date and time#
example 1:

import time
import calendar
cal = calendar.month(2019, 12)
print (cal)
print(time.localtime(time.time()))

#print#
          December 2019
Mo Tu We Th Fr Sa Su
                   1
 2  3  4  5  6  7  8
 9 10 11 12 13 14 15
16 17 18 19 20 21 22
23 24 25 26 27 28 29
30 31

time.struct_time(tm_year=2019, tm_mon=12, tm_mday=16, tm_hour=12, tm_min=57, tm_sec=45, tm_wday=0, tm_yday=350, tm_isdst=0)

example 2: 


import time
import calendar
print(calendar.month(2020,2))
print(time.localtime(time.time()))

example 1::

class doc:
    def fun1():
        print("wel come to 6thenergy hospital")
        print("shankranna dept")
class patient(doc):
    def laugh():
        print("take rest")

        print("watch movie ASN")
class child(patient):
    def smile():
        print("duddu tago magane")

        print("assti tago")

D=child
D.smile()
D.laugh()
D.fun1()

example 2::

class add():
    def add1(x,y):
        print("this is add class and add function ",(x+y))
class sub1(add):
    def sub(x, y):
        print("this is sub class and sub function ",(x-y))
class mult(add):
    def multi(x, y):
        print("this is class  multi and multi function",(x*y))
class div(add):
    def div(x, y):
        print("this is class  div and div function",(x/y))


x = float(input("enter the x value  :"))
y = int(input("enter the y value  :"))
c=div
c.div(x,y)
c.multi(x,y)
c.sub(x,y)
c.add1(x,y)

example 3:

class tumakuru1():
    def tumakuru():
        print("1nd functiom")

    def tumakuru():
        print("2nd functiom")
t=tumakuru1
t.tumakuru()

class chitradurgha(tumakuru):
    def chitradurgha():
        print("dr.sheeta")

    def tumakuru():
        print("dr.shankar")
class Dhavangere(chitradurgha):
    def Dhavangere():
        print("dr.swetha")

    def tumakuru():
        print("dr.shankar")
class Bengaluru(Dhavangere):
    def Bangalore():
        print("dr.samitha")

    def tumakuru():
        print("dr.shankar")
c=Bengaluru
c.Bangalore()
c.Dhavangere()
c.chitradurgha()
c.tumakuru()



poly

class A:
    def add(x,y):
        print(" class A add this number add x, y")
class c():
    def add(x,y):
        print(" class C add this number add x, y")
class B(c,A):
    def add(x,y):
        print("class B add function x, y ")


b=B
# b.add()
# b.add(10,5)
b.add(2,15)


pyramid:  



k=8
for i in range(0,8): 
    for j in range(0,k):
        print(end=" ")
    k=k-1
    for j in range(0,i+1):
        print("* ",end="")
    print()  

k=2
for i in range(8,0,-1):
    for j in range(0,k):
        print(end=" ")
    k=k+1
    for j in range(0,i-1):
        print("* ",end="")
    print()  

7e

        * 
       * * 
      * * * 
     * * * * 
    * * * * * 
   * * * * * * 
  * * * * * * * 
 * * * * * * * * 
  * * * * * * * 
   * * * * * * 
    * * * * * 
     * * * * 
      * * * 
       * * 
        * 










class cal:
    def add():
        x=int(input("enter the value of x:  "))
        y=int(input("enter the value of y:  "))
        print("x+y")
    def sub():
            x=int(input("enter the value of x:  "))
            y=int(input("enter the value of y:  "))
            print("x-y")
z=cal()
z.add
z.sub



hotspot SSID name:  Site91100040
Password         :   6thenergy911




!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Assignement operator

'''Assignment Operator
1.arithmetic operator
2.assignment operator
3.relational operator
4.Logical operator
5.unary operator

1.arithmetic operator: addition,subtraction,multiplicatin,division.
x=5
y=10
a=x+y
b=y-x
c=x*y
d=y/x
print(a)
print(b)
print(c)
print(d)

2.assignment operator:

x = x + 2
x+=2
x*=3
print(x)

a,b=5,6
print(a)
print(b)


n=7
n=-n
print(n)

3.Relational operator(greator,lessor,greater than and lessor than,not equal)
a=5
b=6
print(a>b)
print(a<b)
print(a==b)
print(a<=b)
print(a>=b)
print(a!=b)

4.logical operator: (and, or, not,Gate)
AND Operator
a=5
b=10
print(a<10 and b>a)
print(a<10 and b<a)
print(a>10 and b>a)
print(a>10 and b<a)

OR Operator
a=5
b=10
print(a<10 or b>a)
print(a<10 or b<a)
print(a>10 or b>a)
print(a>10 or b<a)

NOT Operator
a=5
print(a!=6)
print(a!=5)'''


my_string='where is devaraj'
print(my_string.find('is',0,60))


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 classes and objects

'''class Person:
  def __init__(self,Name,age):
    self.Name = Name
    self.age  = age
p1 = Person("John", 36)
print(p1.Name)
print(p1.age)'''

#Insert a function that prints a greeting, and execute it on the p1 object:

class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age
  def myfun(self):
    print("i would like to invite to marraige this is "+ self.age)
p1 = Person("John", "36")
print(p1.myfun())

 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


data types

'''
1.None:when you have variable thats doesnt have value called None
2.Numeric : int,float,complex,Boolean
num=5+9j
print(type(num))

convert float to int
a=5.3
b=int(a)
print(b)

convert int to float
a=5
x=float(a)
print(x)

consruct complex
a=5
b=6
d=complex(a,b)
print(d)


Boolean :Condition true or false
a=5
b=1
if b>a:
    print(' true')
else:
    print('false')

    
convert bool to int
a=True
print(int(a))
b=False
print(int(b))

for i in range(1,100,1):
    print(i)'''

'''d={"dking":"realme","vinayak":"lenovo","dev":"mi"}
print(d.keys())
print(d.values())


d={"dking":"realme","vinayak":"lenovo","dev":"mi"}
print(d['dking'])
print(d['dev'])'''

d={"dking":"realme","vinayak":"lenovo","dev":"mi"}
print(d.get('dking'))
print(d.get('dev'))
    
#################################################################################################################

for loop

'''#for loop
fam1=["dyavanna","pakirayya"]
fam2=["lachumayya","choudayya"]
for x in fam1:
    for y in fam2:
        print(x,y)'''


#Function is block code which is run only when its called, the data known as parameter is assigned to function
#-function returns the data.
 
#function define by def keyword.
'''def my_fuction(fname):
     print(fname + "chincharaki")
my_fuction("devaraj ")
my_fuction("shivaraj")
my_fuction("kaviraj")'''


'''def my_function(fname, lname):
  print(fname  + "  " +  lname)

my_function("Emil", "Refsnes")'''

'''def my_function(*player):
  print("the youngest cricketer is " + player[2])

my_function("Emil", "Refsnes","Devaraj")'''

#keyword arguments key=keyvalue
'''def my_function(player1,player2,player3):
  print("the youngest cricketer is " + player3)

my_function(player1="dev",player2="nayak",player3="king kohli")'''

#If the number of keyword arguments is unknown, add a double ** before the parameter name:
'''def my_function(**kid):
  print("His last name is " + kid["lname"])

my_function(fname = "Tobias", lname = "Refsnes")'''


'''def myfun(country=""):
    print("im from " + country)
myfun("India")
myfun("newzland")'''

#Recursion: fun call itself is called recursion
'''import sys
sys.setrecursionlimit(200)
print(sys.getrecursionlimit())
i = 0
def great():
    global i
    i+=1
    print("hello",i)
    great()
great()'''


'''def tri_recursion(k):
  if(k>0):
    result = k+tri_recursion(k-1)
    print(result)
  else:
    result = 0
  return result

print("\n\nRecursion Example Results")
tri_recursion(7)'''

#lamda
'''x = lambda a: a*10
print(x(5))'''


'''x = lambda a,b,c: a+b+c
print(x(5,6,1))'''


'''def myfunc(n):
  return lambda a : a * n

mydoubler = myfunc(2)

print(mydoubler(12))'''


'''def myfun(n):
    return lambda a : a * n
mydoubler=myfun(2)
print(mydoubler(11))'''

'''def myfunc(n):
  return lambda a : a ** n

mydoubler = myfunc(2)

print(mydoubler(11))'''


#array is used to store multiple values in single variable.
'''cars=["maruti","ford","safari"]
if "maruti" in cars:
      print("yes")'''


#add values by append() keyword
'''cars=["maruti","ford","safari"]
cars.append("kue")
print(cars)'''


#remove particular indes
'''cars=["maruti","ford","safari"]
cars.remove("ford")
print(cars)'''


#Remove last index
'''cars=["maruti","ford","safari"]
cars.pop()
print(cars)'''


#remove first index
'''cars=["maruti","ford","safari"]
cars.pop(0)
print(cars)'''


#Reverse the list order
'''cars=["maruti","ford","safari"]
cars.reverse()
print(cars)'''


#count the no of times vlaues in the list is repeated.
'''cars=["maruti","ford","safari"]
x=cars.count("maruti")
print(x)'''


#classes and objects
class mdrs():
    def tenth_students(self):
     print("we are belongs to 10th class students")
    def ninth_students(self):
     print("we are belongs to 9th class students")
com1= mdrs()
com2= mdrs()
com1.tenth_students()
com2.ninth_students()
#################################################################################

inheritance

class person:
    def __init__(self,fname,lname):
        self.firstname=fname
        self.lastname=lname
    def printname(self):
        print(self.firstname,self.lastname)
p1=person("devaraj","Nayak")
p1.printname()

###################################################################################
list 

'''thislist = ["apple", "banana", "cherry"]
del thislist[0]
print(thislist)'''


'''list1=["a","b","c"]
list2=[1,2,3]
for x in list2:
 list1.append(x)
print(list1)'''

'''list1=["a","b","c"]
list1.remove('a')
print(list1)'''

'''fruits = ["apple", "banana", "cherry"]
fruits.insert(1,'lemon')
print(fruits)'''

'''x = ("apple", "banana", "cherry")
y = list(x)
y[1] = "kiwi"
x = tuple(y)

print(x)'''


'''fruits = ("apple", "banana", "cherry")
print(fruits[0]
)'''

'''thisset = {"apple", "banana", "cherry"}

x = thisset.pop()

print(x) #removed item

print(thisset) #the set after removal
'''




set1 = {"a", "b" , "c"}
set2 = {1, 2, 3}
x=set1.copy(set2)
print(x)





#########################################################################
  SET 

'''set={"apple","banana","cherry"}
if "banana" in set:
    print("yes,'banana' is present in set")'''


'''hisset = {"apple", "banana", "cherry"}

thisset.add("orange")

print(thisset)'''

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

#dictionary#


thisdict =	{
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict)

thisdict =	{
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964} 
print(thisdict["model"])'''


'''dic={"NAME":"DEV","Age":24,"work":"6e"}
if "NAME" in dic:
 print("YES,'NAME' is present in dic")'''


'''dic={"NAME":"DEV","Age":24,"work":"6e"}
print(len(dic))'''

#adding#
'''dic={"NAME":"DEV","Age":24,"work":"6e"}
dic["plcae"]='Bangalore'
print(dic)'''


#remove#
'''dic={"NAME":"DEV","Age":24,"work":"6e"}
dic["plcae"]='Bangalore'
dic.pop('NAME')
print(dic)


#remove last item #
dic={"NAME":"DEV","Age":24,"work":"6e"}
dic["plcae"]='Bangalore'
dic.popitem()
print(dic)'''



'''MYFAMILY= {'child1':{"name":"deva"},'child2':{"name":"raja"},'child3':{"name":"king"}}
print(MYFAMILY)'''

'''child1 = {
  "name" : "Emil",
  "year" : 2004
}
child2 = {
  "name" : "Tobias",
  "year" : 2007
}
child3 = {
  "name" : "Linus",
  "year" : 2011
}

myfamily = {
  "child1" : child1,
  "child2" : child2,
  "child3" : child3S

}
print(myfamily)'''





'''lachumayya={'Son':'vinayaka',"daughter":"hanumanti"}
choudayya={'Son':'Devaraj',"daughter":"ratnamma"}
sabayya={'Son':'veeresh',"daughter":"umadevi"}
yankoba={'Son':'ayyappa',"daughter":"amaramma"}
Hanamanta={'Son':'Devaraj'}
myfamily={"lachumayya":lachumayya,
"choudayya":choudayya,
"sabayya":sabayya,
"yankoba":yankoba,
"Hanamanta":Hanamanta}
for x,y in myfamily.items():
 print(x,y)'''




'''lachumayya={'Son':'vinayaka',"daughter":"hanumanti"}
choudayya={'Son':'Devaraj',"daughter":"ratnamma"}
sabayya={'Son':'veeresh',"daughter":"umadevi"}
yankoba={'Son':'ayyappa',"daughter":"amaramma"}
Hanamanta={'Son':'Devaraj'}
myfamily={"lachumayya":lachumayya,
"choudayya":choudayya,
"sabayya":sabayya,
"yankoba":yankoba,
"Hanamanta":Hanamanta}
for x in myfamily.values():
 print(x)'''


 

'''car =	{
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(
car.get("model")
)'''


#Create a dictionary that contain three dictionaries#
myfamily={
    'child1':{"Name":"Vinayak","year":1989},
    'child2':{"Name":"shekar","year":1990},
    'child3':{"Name":"Vinayak","year":1996}
    }
print(myfamily)
 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

'''list is a collection of value and mutable and find index value and you can change
list=[1,2,3,,5,6,7,8,9,10,11]
list.append(55)
list.insert(1,3)
print(list)
......................................................................................

tuple=is immutable and can find index value
tuple=[1,2,3,4,5,6,7,8,9,10,11]
print(tuple[1])


......................................................................................
set =it will not maintain sequence number and not  support
set={1,66,3,4,88,6,7,89,2}
print(set)
......................................................................................
dictionary is 2 pair of elements key and value
1 is keydat
dev is value


data={1:'dev',2:'raj',3:'nayak'}
print(data.get(1))
print(data[2]

data={1:'dev',2:'raj',3:'nayak'}
print(data.get(4,'not found'))'''

'''merge 2 list into dictionary'''
'''key=["shivu","dev","vinay"]
values=["python","cprogram","java"]
data=dict(zip(key,values))
print(data['shivu'])'''



'''delted the key
key=["shivu","dev","vinay"]
values=["python","cprogram","java"]
data=dict(zip(key,values))
del data["dev"]
print(data)'''

'''add the key
key=["shivu","dev","vinay"]
values=["python","cprogram","java"]
data=dict(zip(key,values))
data["kiran"]='android'
print(data)'''


'''add function additionally'''
'''pro={"dev":"raj","nayak":"chinch","python":['pycharm','sal'],'java':{'css':'api',"jse":"net"}}
print(pro['nayak'])
print(pro['python'][1])
print(pro['java']['css'])'''

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   
While loop

'''i=8
while i>6:
    print(i)
    i-=1'''


#break#

'''i=1
while i<6:
    print(i)
    if i==4:
        break
    i+=1'''

#continue#
'''i=0
while i<6:
    i+=1
    if i==3:
        continue
    print(i)'''

#else statement we can run a block of code once when the condition no longer is true:

'''i=1
while i<6:
    print(i)
    i+=1
else:
        print('i is no longer true')'''



#for loop
'''list=["devaraj","nayak","puladinni"]
for x in list:
    if x=="nayak":
        continue
    print(x)'''

#for loops
'''for x in range(2,30,3):
 print(x)'''


#loops ending
'''for x in range(2,30,3):
    print(x)
else:
        print("finally, finished")'''

#nested loop
'''adj = ["red", "big", "tasty"]
fruits = ["apple", "banana", "cherry"]

for x in adj:
  for y in fruits:
    print(x, y)'''

# having an empty for loop like this, would raise an error without the pass statement
'''for x in [0, 1, 2]:
  pass'''


#passing a list through argument
'''def my_function(food):
  for x in food:
    print(x)
veg=["cucumber","tomato","brinjal"]
my_function(veg)'''


#o let a function return a value, use the return statement:
'''def my_fun(x):
 return 5 *x
print(my_fun(3))
print(my_fun(4))
print(my_fun(5))
print(my_fun(6))'''

def tri_recursion(k):
  if(k>0):
    result = k+tri_recursion(k-1)
    print(result)
  else:
    result = 0
  return result

print("\n\nRecursion Example Results")
tri_recursion(6)


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@SS
















































































      
      